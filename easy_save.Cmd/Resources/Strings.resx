<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllProcess.Cancel" xml:space="preserve">
    <value>Launch of all the processes canceled</value>
  </data>
  <data name="AllProcess.Continue" xml:space="preserve">
    <value>
! Press enter to continue !</value>
  </data>
  <data name="AllProcess.EndProcess" xml:space="preserve">
    <value>=&gt; All backup processes have been launched correctly</value>
  </data>
  <data name="AllProcess.Error" xml:space="preserve">
    <value>
backup process could not be started</value>
  </data>
  <data name="AllProcess.FileError" xml:space="preserve">
    <value>File(s) couldn't be saved</value>
  </data>
  <data name="AllProcess.FileSuccess" xml:space="preserve">
    <value>All files have been saved</value>
  </data>
  <data name="AllProcess.ProcessLaunched" xml:space="preserve">
    <value>The save processes have been launched</value>
  </data>
  <data name="AllProcess.StartProcess" xml:space="preserve">
    <value>Enter [yes] if you want to launch all the save processes, anything other than [yes] will result in a cancel</value>
  </data>
  <data name="BackupDetails.Continue" xml:space="preserve">
    <value>
! Press enter to continue !</value>
  </data>
  <data name="BackupDetails.Empty" xml:space="preserve">
    <value>=&gt; No save work available</value>
  </data>
  <data name="BackupDetails.Presentation" xml:space="preserve">
    <value>Here are the available save works :</value>
  </data>
  <data name="CancelWord" xml:space="preserve">
    <value>cancel</value>
  </data>
  <data name="ConfirmWord" xml:space="preserve">
    <value>yes</value>
  </data>
  <data name="Main.Menu" xml:space="preserve">
    <value>1| Create a new backup  
2| Remove a backup  
3| Start a backup  
4| Start all available backup processes  
5| View backup details  
6| Exit</value>
  </data>
  <data name="Main.Option" xml:space="preserve">
    <value>
Enter an option: </value>
  </data>
  <data name="ParameterPresentation" xml:space="preserve">
    <value>=&gt; These are your input parameters:</value>
  </data>
  <data name="Remove.Cancel" xml:space="preserve">
    <value>Deletion cancelled</value>
  </data>
  <data name="Remove.ConfirmChoice" xml:space="preserve">
    <value>Enter [yes] to confirm the deletion of :</value>
  </data>
  <data name="Remove.ConfirmChoice2" xml:space="preserve">
    <value>, enter [cancel] if you want to cancel the deletion process (leave empty to change name)</value>
  </data>
  <data name="Remove.Continue" xml:space="preserve">
    <value>
! Press enter to continue !</value>
  </data>
  <data name="Remove.MissingFile" xml:space="preserve">
    <value>
=&gt; Backup process not found</value>
  </data>
  <data name="Remove.Name" xml:space="preserve">
    <value>Enter the name of the backup to delete</value>
  </data>
  <data name="Remove.SucessRemove" xml:space="preserve">
    <value>=&gt; Backup process removed</value>
  </data>
  <data name="Save.Cancel" xml:space="preserve">
    <value>Creation cancelled</value>
  </data>
  <data name="Save.ConfirmChoice" xml:space="preserve">
    <value>Enter [yes] if you want to create the save work, rentrer [cancel] if you want to exit the save processus creation (leave empty to re-enter your process parameters )</value>
  </data>
  <data name="Save.Continue" xml:space="preserve">
    <value>
! Press enter to continue !</value>
  </data>
  <data name="Save.ErroLimit" xml:space="preserve">
    <value>
=&gt; Maximum number of backup processes reached or name or name already taken, unable to create</value>
  </data>
  <data name="Save.ErrorInput" xml:space="preserve">
    <value>
=&gt; Invalid input, please try again</value>
  </data>
  <data name="Save.ErrorSaveType" xml:space="preserve">
    <value>
=&gt; Invalid save type</value>
  </data>
  <data name="Save.InputPath" xml:space="preserve">
    <value>Selected entry path: </value>
  </data>
  <data name="Save.Name" xml:space="preserve">
    <value>Enter the name of your save</value>
  </data>
  <data name="Save.OutputPath" xml:space="preserve">
    <value>Selected destination path:</value>
  </data>
  <data name="Save.PathDestination" xml:space="preserve">
    <value>
Enter the path of the destination</value>
  </data>
  <data name="Save.PathSave" xml:space="preserve">
    <value>
Enter the path of the file to save</value>
  </data>
  <data name="Save.Process" xml:space="preserve">
    <value>=&gt; Backup process created</value>
  </data>
  <data name="Save.SaveName" xml:space="preserve">
    <value>Name of the save project:</value>
  </data>
  <data name="Save.SaveType" xml:space="preserve">
    <value>
Enter the type of save(0 : All files (chosen by default) / 1 : Changed files)</value>
  </data>
  <data name="Save.SaveType2" xml:space="preserve">
    <value>Selected save type (0 -&gt; Complete, 1 -&gt; Incremental): </value>
  </data>
  <data name="SaveStart.ConfirmChoice" xml:space="preserve">
    <value>Enter [yes] to confirm the launch of this save process :</value>
  </data>
  <data name="SaveStart.ConfirmChoice2" xml:space="preserve">
    <value>, enter [cancel] if you want to cancel the launch of the save process (leave empty to select an other process)</value>
  </data>
  <data name="StartSave.Cancel" xml:space="preserve">
    <value>Launch of the save process canceled</value>
  </data>
  <data name="StartSave.Continue" xml:space="preserve">
    <value>
! Press enter to continue !</value>
  </data>
  <data name="StartSave.Error" xml:space="preserve">
    <value> Error(s) during the save process</value>
  </data>
  <data name="StartSave.Name" xml:space="preserve">
    <value>Enter the name of the backup process to launch</value>
  </data>
  <data name="StartSave.StartProcess" xml:space="preserve">
    <value>=&gt; Backup process started</value>
  </data>
  <data name="StartSave.Sucess" xml:space="preserve">
    <value>=&gt; The save process has been completed successfully</value>
  </data>
</root>